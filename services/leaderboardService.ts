

import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { LeaderboardEntry, ScoreSubmission } from '../types.ts';

// Manually define the database schema types. 
// In a real project, this would be generated by `supabase gen types typescript`.
export type Database = {
  public: {
    Tables: {
      scores: {
        Row: {
          created_at: string
          date: string
          fid: number
          id: number
          mistakes: number
          time: number
          username: string
        }
        Insert: {
          created_at?: string
          date: string
          fid: number
          id?: number
          mistakes: number
          time: number
          username: string
        }
        Update: {
          created_at?: string
          date?: string
          fid?: number
          id?: number
          mistakes?: number
          time?: number
          username?: string
        }
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

let supabase: SupabaseClient<Database> | null = null;

if (supabaseUrl && supabaseKey) {
  try {
    supabase = createClient<Database>(supabaseUrl, supabaseKey);
  } catch(e) {
    console.error("Failed to initialize Supabase client.", e);
  }
}

const getSupabaseClient = (): SupabaseClient<Database> => {
    if (!supabase) {
        throw new Error("Supabase is not configured. Please set SUPABASE_URL and SUPABASE_ANON_KEY environment variables in your deployment settings.");
    }
    return supabase;
}

// Helper to format time
const formatTime = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}m ${secs.toString().padStart(2, '0')}s`;
};

export const getLeaderboard = async (date: string): Promise<LeaderboardEntry[]> => {
    const client = getSupabaseClient();

    console.log(`Fetching leaderboard for date: ${date}`);
    
    const { data, error } = await client
        .from('scores')
        .select('*')
        .eq('date', date)
        .order('mistakes', { ascending: true })
        .order('time', { ascending: true })
        .limit(20);

    if (error) {
        console.error("Error fetching leaderboard:", error);
        throw new Error("Could not load leaderboard data from Supabase.");
    }

    if (!data) {
        return [];
    }

    return data.map((entry, index) => ({
        rank: index + 1,
        name: entry.username,
        time: formatTime(entry.time),
        mistakes: entry.mistakes,
    }));
};

export const submitScore = async (score: ScoreSubmission) => {
    const client = getSupabaseClient();
    
    console.log("Submitting score to Supabase:", score);
    
    const { error } = await client
        .from('scores')
        .insert(score);

    if (error) {
        console.error("Error submitting score:", error);
        // Don't throw here, as it's not critical to the user experience if score submission fails silently.
        // A robust app might add this to a retry queue.
        return { success: false, error };
    }
    
    console.log("Score submitted successfully.");
    return { success: true };
};